generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model application {
  id                 Int                  @id @default(autoincrement())
  name               String?              @db.VarChar(255)
  surname            String?              @db.VarChar(255)
  pnr                String?              @db.VarChar(255)
  email              String?              @unique @db.VarChar(255)
  status             application_status   @default(INCOMPLETE)
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @default(now()) @updatedAt
  user               user?
  availability       availability[]
  competence_profile competence_profile[]
  migration          migration?
}

enum application_status {
  // User info is present, but has not filled in availability, comp.profile, and submitted the application yet.
  // User might not even be registered.
  INCOMPLETE
  // User has submitted the application and is waiting for admin to handle
  UNHANDLED
  ACCEPTED
  REJECTED
}

model availability {
  id             Int         @id @default(autoincrement())
  from_date      DateTime    @db.Date
  to_date        DateTime    @db.Date
  application_id Int
  application    application @relation(fields: [application_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model competence {
  id                 Int                  @id @default(autoincrement())
  lang               language             @default(en_US)
  name               String               @db.VarChar(255)
  competence_profile competence_profile[]

  @@index([id, lang])
}

enum language {
  en_US
  sv_SE
}

model competence_profile {
  id                  Int         @id @default(autoincrement())
  years_of_experience Decimal     @db.Decimal(4, 2)
  application_id      Int
  application         application @relation(fields: [application_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  competence_id       Int
  competence          competence  @relation(fields: [competence_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model migration {
  application_id Int         @id
  application    application @relation(fields: [application_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  url            String
}

model role {
  id   Int    @id @default(autoincrement())
  name String @db.VarChar(255)
  user user[]
}

model user {
  id             Int          @id @default(autoincrement())
  username       String       @db.VarChar(255)
  password       String       @db.VarChar(255)
  role_id        Int
  role           role         @relation(fields: [role_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  // If the user is an applicant (role_id = 2 at the time of writing) and applies, an application entry is added here.
  application_id Int?         @unique
  application    application? @relation(fields: [application_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}
